//SPDX-License-Identifier: MIT
pragma solidity ^0.8.29;
import {IERC20} from "../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";


contract ProtocolReward {
    // Protocol reward is a percentage of the interest income generated by the deposit pool.
    // It is used to incentivize the protocol and cover operational costs.
    // The protocol reward is calculated as a percentage of the total interest income generated by the deposit pool.
    // The protocol reward is distributed to the protocol's treasury address.

    address public immutable treasurOwnerAddress;
    IERC20 public immutable usdcContract;

    constructor(IERC20 _usdcContract, address _treasurOwnerAddress) {
        usdcContract = _usdcContract;
        treasurOwnerAddress = _treasurOwnerAddress;
    }

    modifier onlyOwner(address to) {
        require(to != address(0), "Invalid address");
        require(to == treasurOwnerAddress, "Not authorized to withdraw");
        _;
    }

    function receive_rewards_to_treasury (address from, uint256 amount) external returns (bool) {
        require(msg.sender == treasurOwnerAddress, "Only treasury can call this function");
        require(usdcContract.transferFrom(from, treasurOwnerAddress, amount), "Transfer failed");
        return true;
    }


    function withdraw_from_treasury(address to, uint256 amount) external 
        onlyOwner (to)
    returns (bool) {
        require(msg.sender == treasurOwnerAddress, "Only treasury can call this function");
        require(usdcContract.balanceOf(treasurOwnerAddress) >= amount, "Insufficient balance in treasury");
        require(usdcContract.transfer(to, amount), "Transfer failed");
        return true;
    }

  
}